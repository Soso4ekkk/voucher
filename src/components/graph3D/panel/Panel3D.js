import { useState } from 'react';

import cone from '../../../modules/graph3D/figures/cone';
import cube from '../../../modules/graph3D/figures/cube';
import sphera from '../../../modules/graph3D/figures/sphera';
import cylinder from '../../../modules/graph3D/figures/cylinder';
import tor from '../../../modules/graph3D/figures/tor';
import ellipsoid from '../../../modules/graph3D/figures/ellipsoid';
import ellipticalCylinder from '../../../modules/graph3D/figures/ellipticalCylinder';
import ellipticalParaboloid from '../../../modules/graph3D/figures/ellipticalParaboloid';
import hyperbolicCylinder from '../../../modules/graph3D/figures/hyperbolicCylinder';
import hyperbolicParaboloid from '../../../modules/graph3D/figures/hyperbolicParaboloid';
import parabolicCylinder from '../../../modules/graph3D/figures/parabolicCylinder';
import oneSheetedHyperboloid from '../../../modules/graph3D/figures/oneSheetedHyperboloid';
import twoSheetedHyperboloid from '../../../modules/graph3D/figures/twoSheetedHyperboloid';
import surprise from '../../../modules/graph3D/figures/surprise';

import Planets from "../../../modules/graph3D/figures/Planets";

import './panel3D.css';

function Panel3D(props) {
    const { 
        flags, 
        figures,
        locationFigure,
        move,
        transform,
        animations, 
        LIGHT
    } = props;

    let planets = new Planets();

    const [figuresLength, setFiguresLength] = useState(figures.length);  

    // —Ä–∏—Å–æ–≤–∞—Ç—å/–Ω–µ —Ä–∏—Å–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏
    const points = (e) => {
        flags.drawPoints = e.target.checked;
    }

    // —Ä–∏—Å–æ–≤–∞—Ç—å/–Ω–µ —Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–±—Ä–∞
    const edges = (e) => {
        flags.drawEdges = e.target.checked;
    }

    // —Ä–∏—Å–æ–≤–∞—Ç—å/–Ω–µ —Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã
    const polygons = (e) => {
        flags.drawPolygons = e.target.checked;
    }

    // –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    const anim = (e) => {
        flags.animation = e.target.checked;
    }

    // —Ä–∏—Å–æ–≤–∞—Ç—å/–Ω–µ —Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–Ω–∏
    const shadow = (e) => {
        flags.dark = e.target.checked;
    }

    // –¥–≤–∏–≥–∞—Ç—å/–Ω–µ –¥–≤–∏–≥–∞—Ç—å —Å–≤–µ—Ç
    const shine = (e) => {
        flags.light = e.target.checked;
    }

    // –≤—ã–±–æ—Ä —Ñ–∏–≥—É—Ä—ã
    const changeFigure = (e) => {
        let f = 0;
        switch (e.target.value) {
            case '—Ñ–∏–≥—É—Ä—ã':
                f = 1;
                break;
            case '–∫–æ–Ω—É—Å':
                figures.push(new cone());
                break;
            case '–∫—É–±':
                figures.push(new cube());
                break;
            case '—Å—Ñ–µ—Ä–∞':
                figures.push(new sphera());
                break;
            case '—Ü–∏–ª–∏–Ω–¥—Ä':
                figures.push(new cylinder());
                break;
            case '—Ç–æ—Ä':
                figures.push(new tor());
                break;
            case '—ç–ª–ª–∏–ø—Å–æ–∏–¥':
                figures.push(new ellipsoid());
                break;
            case '—ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–ª–∏–Ω–¥—Ä':
                figures.push(new ellipticalCylinder());
                break;
            case '—ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–±–æ–ª–æ–∏–¥':
                figures.push(new ellipticalParaboloid());
                break;
            case '–≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ü–∏–ª–∏–Ω–¥—Ä':
                figures.push(new hyperbolicCylinder());
                break;
            case '–≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–±–æ–ª–æ–∏–¥':
                figures.push(new hyperbolicParaboloid());
                break;
            case '–ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ü–∏–ª–∏–Ω–¥—Ä':
                figures.push(new parabolicCylinder());
                break;
            case '–æ–¥–Ω–æ–ø–æ–ª–æ—Å—Ç–Ω–æ–π –≥–∏–ø–µ—Ä–±–æ–ª–æ–∏–¥':
                figures.push(new oneSheetedHyperboloid());
                break;
            case '–¥–≤—É–ø–æ–ª–æ—Å—Ç–Ω–æ–π –≥–∏–ø–µ—Ä–±–æ–ª–æ–∏–¥':
                figures.push(new twoSheetedHyperboloid());
                break;
            case '—Å—é—Ä–ø—Ä–∏–∑ üéÇ':
                figures.push(new surprise());
                break;
            case '—Å–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üåå':
                planets.figures.forEach(figure => {
                    figures.push(figure);
                });
                planets.animations.forEach(anim => {
                    animations.push(anim)
                });
                break;
            default:
                break;
        }
        // –≤—ã–≤–æ–¥ —Ñ–∏–≥—É—Ä –ø–æ —Ü–∏–ª–∏–Ω–¥—Ä—É
        if (f === 0) {
            const location = locationFigure;
            // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã –≤ —Ü–∏–ª–∏–Ω–¥—Ä–µ
            const matrix = move(
                location.R * Math.cos(location.t),
                location.R * Math.sin(location.t),
                location.k
            );
            // –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –≤ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é
            if (location.t < Math.PI * 2) {
                figures[figures.length - 1].points.forEach(point => {
                    transform(matrix, point);
                });
                location.t += location.dt;
            }
            // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ñ–∏–≥—É—Ä–∞–º–∏ –≤ —Ç—Ä–æ–π–∫–µ
            if (location.t === Math.PI * 2) {
                location.t = 0;
            }
            // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–≥—É—Ä
            if (figures.length % 3 === 0) {
                location.k += 80;
            }
        }
    }

    // —Å–∏–ª–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è
    const setPowerLight = (e) => {
        LIGHT.lumen = e.target.value;
    }

    // —É–¥–∞–ª–∏—Ç—å —Ñ–∏–≥—É—Ä—É
    const deleteFigure = () => {
        if (figures.length > 0) {
            figures.pop();
            setFiguresLength(figures.length);
            // —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä
            locationFigure.t -= locationFigure.dt;
            if (figures.length % 3 !== 0 && figures.length + 1 >= 3) {
                locationFigure.k -= 80;
            }
        }
    }

    // –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–∏–≥—É—Ä 
    const setColor = (e) => {
        const color = e.target.value;
        for (let i = 0; i < figures.length; i++) {
            figures[i].polygons.forEach(poly => {
                poly.color = poly.hexToRgb(color);
            });
        }
    }

    return (
        <div className="panel3d">
            <div className="checkbox">
                <label>
                    <input  
                        className="check3D" 
                        type="checkbox" 
                        onChange={points} 
                        defaultChecked={flags.drawPoints}
                    ></input>
                    &nbsp;&nbsp;—Ç–æ—á–∫–∏
                </label> 
                <label>
                    <input 
                        className="check3D" 
                        type="checkbox" 
                        onChange={edges} 
                        defaultChecked={flags.drawEdges}
                    ></input>
                    &nbsp;&nbsp;—Ä–µ–±—Ä–∞
                </label>
                <label>
                    <input  
                        className="check3D" 
                        type="checkbox" 
                        onChange={polygons} 
                        defaultChecked={flags.drawPolygons}
                    ></input>
                    &nbsp;&nbsp;–ø–æ–ª–∏–≥–æ–Ω—ã
                </label>
                <label>
                    <input 
                        className="check3D" 
                        type="checkbox" 
                        onChange={anim} 
                        defaultChecked={flags.animation}
                    ></input>
                    &nbsp;&nbsp;–∞–Ω–∏–º–∞—Ü–∏—è
                </label>
                <label>
                    <input
                        className="check3D" 
                        type="checkbox" 
                        onChange={shadow} 
                        defaultChecked={flags.dark}
                    ></input>
                    &nbsp;&nbsp;—Ç–µ–Ω–∏
                </label>
                <label>
                    <input
                        className="check3D" 
                        type="checkbox" 
                        onChange={shine} 
                        defaultChecked={flags.light}
                    ></input>
                    &nbsp;&nbsp;—Å–≤–µ—Ç
                </label>  
            </div>
            <div className="figures-delete">
                <select 
                    className="figures" 
                    onChange={changeFigure}
                >
                    <option>—Ñ–∏–≥—É—Ä—ã</option>
                    <option>–∫–æ–Ω—É—Å</option>
                    <option>–∫—É–±</option>
                    <option>—Å—Ñ–µ—Ä–∞</option>
                    <option>—Ü–∏–ª–∏–Ω–¥—Ä</option>
                    <option>—Ç–æ—Ä</option>
                    <option>—ç–ª–ª–∏–ø—Å–æ–∏–¥</option>
                    <option>—ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–±–æ–ª–æ–∏–¥</option>
                    <option>—ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–ª–∏–Ω–¥—Ä</option>
                    <option>–≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ü–∏–ª–∏–Ω–¥—Ä</option>
                    <option>–≥–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–±–æ–ª–æ–∏–¥</option>
                    <option>–ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ü–∏–ª–∏–Ω–¥—Ä</option>
                    <option>–æ–¥–Ω–æ–ø–æ–ª–æ—Å—Ç–Ω–æ–π –≥–∏–ø–µ—Ä–±–æ–ª–æ–∏–¥</option>
                    <option>–¥–≤—É–ø–æ–ª–æ—Å—Ç–Ω–æ–π –≥–∏–ø–µ—Ä–±–æ–ª–æ–∏–¥</option>
                    <option>—Å—é—Ä–ø—Ä–∏–∑ üéÇ</option>
                    <option>—Å–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üåå</option>
                </select>
                <button className="delete" onClick={deleteFigure}>—É–¥–∞–ª–∏—Ç—å</button>
            </div>
            <div className="powerlight-color">
                <input 
                    className="powerlight" 
                    type="range" 
                    min="25000" 
                    max="100000"
                    onChange={setPowerLight}
                    defaultValue={LIGHT.lumen}
                ></input>
                <input className="color" type="color" onChange={setColor} defaultValue="#ffc8fc"></input>
            </div>
        </div>
    );
}

export default Panel3D;